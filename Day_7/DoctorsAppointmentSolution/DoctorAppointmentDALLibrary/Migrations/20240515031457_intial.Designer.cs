// <auto-generated />
using System;
using DoctorAppointmentDALLibrary.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorAppointmentDALLibrary.Migrations
{
    [DbContext(typeof(DoctorAppointmentContext))]
    [Migration("20240515031457_intial")]
    partial class intial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DoctorAppointmentModelLib.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppointmentDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorAssignedId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientRaisedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorAssignedId");

                    b.HasIndex("PatientRaisedId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("DoctorAppointmentModelLib.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DoctorAppointmentModelLib.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DoctorAppointmentModelLib.Appointment", b =>
                {
                    b.HasOne("DoctorAppointmentModelLib.Doctor", "DoctorAssigned")
                        .WithMany()
                        .HasForeignKey("DoctorAssignedId");

                    b.HasOne("DoctorAppointmentModelLib.Patient", "PatientRaised")
                        .WithMany()
                        .HasForeignKey("PatientRaisedId");

                    b.Navigation("DoctorAssigned");

                    b.Navigation("PatientRaised");
                });

            modelBuilder.Entity("DoctorAppointmentModelLib.Doctor", b =>
                {
                    b.HasOne("DoctorAppointmentModelLib.Patient", null)
                        .WithMany("DoctorVisited")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("DoctorAppointmentModelLib.Patient", b =>
                {
                    b.Navigation("DoctorVisited");
                });
#pragma warning restore 612, 618
        }
    }
}
